// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String          @id @default(cuid())
  name           String
  email          String         @unique
  password       String
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  drawings       Drawing[]
  sharedDrawings SharedDrawing[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Analytics {
  id          Int      @id @default(autoincrement())
  timestamp   DateTime @default(now())
  visitorId   String
  pageVisited String
  userAgent   String
  ipAddress   String
  country     String
  city        String
  region      String
  referer     String?  @default("Direct/Bookmark")

  @@index([visitorId])
}

model CityCoordinates {
  id        Int    @id @default(autoincrement())
  city      String
  latitude  Float
  longitude Float

  @@unique([city])
  @@index([city])
}

model Drawing {
  id            String          @id @default(cuid())
  title         String
  elements      Element[]
  elementsOrder String[]
  appState      AppState?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  deletedAt     DateTime?
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  sharedWith    SharedDrawing[]
  publicAccess  PublicAccess    @default(PRIVATE)
  
  @@index([userId])
}

enum PublicAccess {
  PRIVATE
  READ
  EDIT
}

model SharedDrawing {
  id          String      @id @default(cuid())
  drawingId   String
  drawing     Drawing     @relation(fields: [drawingId], references: [id], onDelete: Cascade)
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessLevel AccessLevel
  createdAt   DateTime    @default(now())

  @@unique([drawingId, userId], name: "uniqueDrawingUserShare")
  @@index([drawingId])
  @@index([userId])
}

enum AccessLevel {
  READ
  EDIT
}

enum ElementType {
  text
  selection
  rectangle
  diamond
  ellipse
  line
  arrow
  freedraw
  image
  frame
  embeddable
}

model Element {
  id         String   @id
  type       ElementType
  x          Float
  y          Float
  width      Float
  height     Float
  drawingId  String
  properties Json
  drawing    Drawing  @relation(fields: [drawingId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@index([drawingId])
}

model AppState {
  id        Int      @id @default(autoincrement())
  appState  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  drawingId String   @unique
  drawing   Drawing  @relation(fields: [drawingId], references: [id], onDelete: Cascade)

  @@index([drawingId])
}
